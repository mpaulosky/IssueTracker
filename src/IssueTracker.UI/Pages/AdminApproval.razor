@page "/AdminApproval"

@attribute [Authorize(Policy = "Admin")]
@inject AuthenticationStateProvider authProvider
@inject IIssueService issueService
@inject IUserService userService
@inject NavigationManager navManager

<PageTitle>AdminApproval</PageTitle>

<h1 page-heading text-light text-uppercase mb-4">Admin Approval</h1>

<div class="row">
	<div class="col-12 close-button-section">
		<button class="btn btn-close" @onclick="ClosePage"></button>
	</div>
</div>


@if (issues?.Count > 0)
{
	<div>
		<h2>Issues</h2>
		<p>These are the issues that are currently active.</p>
		<hr />
		@foreach (var s in issues)
		{
			<hr />
			<div>
				@s.IssueName
			</div>
			<p>@s.DateCreated.ToString("MM.dd.yyyy")</p>
			<p>@s.Description</p>
			@if (s.IssueStatus is not null)
			{
				<div>@s.IssueStatus.StatusName</div>
				<p>@((MarkupString)s.OwnerNotes)</p>
			}
		}
	</div>
}

@if (archived?.Count > 0)
{
	<div>
		<h2>Archived Issues</h2>
		<p>These are the issues that were active but are now archived.</p>
		<hr />
		@foreach (var s in archived)
		{
			<hr />
			<div>
				@s.IssueName
			</div>
			<p>@s.DateCreated.ToString("MM.dd.yyyy")</p>
			<p>@s.Description</p>
			@if (s.IssueStatus is not null)
			{
				<div>@s.IssueStatus.StatusName</div>
				<p>@((MarkupString)s.OwnerNotes)</p>
			}
		}
	</div>
}



@code {
	private UserModel loggedInUser;
	private List<IssueModel> issues;
	private List<IssueModel> archived;

	protected override async Task OnInitializedAsync()
	{
		loggedInUser = await authProvider.GetUserFromAuth(userService);
		
		var results = await issueService.GetIssues();
		
		if (loggedInUser is not null && results is not null)
		{
			issues = results.OrderByDescending(s => s.DateCreated).ToList();
			archived = issues.Where(s => s.Archived).ToList();
		}

	}
	
	
	private void ClosePage()
	{
		navManager.NavigateTo("/");
	}
}
