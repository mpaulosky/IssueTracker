@page "/"
@inject AuthenticationStateProvider AuthProvider
@inject IUserService UserService
@inject IIssueService IssueService
@inject IStatusService StatusService
@inject NavigationManager NavManager
@inject ProtectedSessionStorage SessionStorage


<PageTitle>Index</PageTitle>


<h1 class="page-heading text-uppercase mb-4">Issue Tracker</h1>
<div class="issue-container">
	<button @onclick="LoadCreatePage" class="issue-btn btn btn-outline-light btn-lg text-uppercase">New Issue</button>
</div>

<div class="row">
	<div class="issues-count col-md-4 text-light mt-2">@_issues?.Count Issues</div>
	<div class="col-md-4 col-xl-5 btn-group">
		<button class="btn btn-order @SortedByNewClass(true)" @onclick="() => OrderByNew(true)">New</button>
		<button class="btn btn-order @SortedByNewClass(false)" @onclick="() => OrderByNew(false)">Popular</button>
	</div>
	<div class="col-md-4 col-xl-3 search-box">
		<input type="text" placeholder="Search"
					aria-label="Search box" class="form-control rounded-control"
					@oninput="txt => OnSearchInput((string)txt.Value)"/>
	</div>
</div>

<div class="row">
	<div class="col-md-8 col-xl-9">
		@if (_issues is not null)
		{
			@foreach (var s in _issues)
			{
				<div class="issue-entry">
					<div class="issue-entry-text">
						<div class="issue-entry-text-title" @onclick="() => OpenDetails(s)">
							@s.Description
						</div>
					</div>
					<div class="issue-entry-status @GetIssueStatusClass(s)">
						<div class="issue-entry-status-text">
							@s.IssueStatus?.StatusName
						</div>
					</div>
				</div>
			}
		}
	</div>
</div>

@code {
	private UserModel _loggedInUser = new();
	private List<IssueModel> _issues;
	private List<StatusModel> _statuses;

	private string _selectedStatus = "All";
	private string _searchText = "";
	bool _isSortedByNew = true;

	protected override async Task OnInitializedAsync()
	{
		_issues = await IssueService.GetIssues();
		_statuses = await StatusService.GetStatuses();
		await LoadAndVerifyUser();
	}

	private void LoadCreatePage()
	{
		if (_loggedInUser is not null)
		{
			NavManager.NavigateTo("/Create");
		}
		else
		{
			NavManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
		}
	}

	private async Task LoadAndVerifyUser()
	{
		var authState = await AuthProvider.GetAuthenticationStateAsync();
		var objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;

		if (string.IsNullOrWhiteSpace(objectId) == false)
		{
			_loggedInUser = await UserService.GetUserFromAuthentication(objectId) ?? new UserModel();

			var firstName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("givenname"))?.Value;
			var lastName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("surname"))?.Value;
			var displayName = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("name"))?.Value;
			var email = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("email"))?.Value;

			var isDirty = false;
			if (objectId.Equals(_loggedInUser.ObjectIdentifier) == false)
			{
				isDirty = true;
				_loggedInUser.ObjectIdentifier = objectId;
			}
			if (firstName.Equals(_loggedInUser.FirstName) == false)
			{
				isDirty = true;
				_loggedInUser.FirstName = firstName;
			}
			if (lastName.Equals(_loggedInUser.LastName) == false)
			{
				isDirty = true;
				_loggedInUser.LastName = lastName;
			}
			if (displayName.Equals(_loggedInUser.DisplayName) == false)
			{
				isDirty = true;
				_loggedInUser.DisplayName = displayName;
			}
			if (email.Equals(_loggedInUser.EmailAddress) == false)
			{
				isDirty = true;
				_loggedInUser.EmailAddress = email;
			}
			if (isDirty)
			{
				if (string.IsNullOrWhiteSpace(_loggedInUser.Id))
				{
					await UserService.CreateUser(_loggedInUser);
				}
				else
				{
					await UserService.UpdateUser(_loggedInUser);
				}
			}
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await LoadFilterState();
			await FilterSuggestions();
			StateHasChanged();
		}
	}

	private async Task LoadFilterState()
	{
	//var stringResults = await sessionStorage.GetAsync<string>(nameof(selectedCategory));
	//selectedCategory = stringResults.Success ? stringResults.Value : "All";

		ProtectedBrowserStorageResult<string> stringResults = await SessionStorage.GetAsync<string>(nameof(_selectedStatus));
		_selectedStatus = stringResults.Success ? stringResults.Value : "All";

		stringResults = await SessionStorage.GetAsync<string>(nameof(_searchText));
		_searchText = stringResults.Success ? stringResults.Value : "";

		ProtectedBrowserStorageResult<bool> boolResults = await SessionStorage.GetAsync<bool>(nameof(_isSortedByNew));
		_isSortedByNew = boolResults.Success ? boolResults.Value : true;
	}

	private async Task SaveFilterState()
	{
	//await sessionStorage.SetAsync(nameof(selectedCategory), selectedCategory);
		await SessionStorage.SetAsync(nameof(_selectedStatus), _selectedStatus);
		await SessionStorage.SetAsync(nameof(_searchText), _searchText);
		await SessionStorage.SetAsync(nameof(_isSortedByNew), _isSortedByNew);
	}

	private async Task FilterSuggestions()
	{
		List<IssueModel> output = await IssueService.GetIssues();

	//if (selectedCategory != "All")
	//{
	//	output = output.Where(s => s.Category?.CategoryName == selectedCategory).ToList();
	//}

		if (_selectedStatus != "All")
		{
			output = output.Where(s => s.IssueStatus?.StatusName == _selectedStatus).ToList();
		}

		if (string.IsNullOrWhiteSpace(_searchText) == false)
		{
			output = output.Where(
				s => s.IssueName.Contains(_searchText, StringComparison.InvariantCultureIgnoreCase) ||
						s.Description.Contains(_searchText, StringComparison.InvariantCultureIgnoreCase)
				).ToList();
		}

		if (_isSortedByNew)
		{
			output = output.OrderByDescending(s => s.DateCreated).ToList();
		}
	//else
	//{
	//	output = output.OrderByDescending(s => s.UserVotes.Count)
	//									.ThenByDescending(s => s.DateCreated).ToList();
	//}

		_issues = output;

		await SaveFilterState();
	}

	private async Task OrderByNew(bool isNew)
	{
		_isSortedByNew = isNew;
		await FilterSuggestions();
	}

	private async Task OnSearchInput(string searchInput)
	{
		_searchText = searchInput;
		await FilterSuggestions();
	}

	//private async Task OnCategoryClick(string category = "All")
	//{
	//	selectedCategory = category;
	//	await FilterSuggestions();
	//}

	private async Task OnStatusClick(string status = "All")
	{
		_selectedStatus = status;
		await FilterSuggestions();
	}

	//private async Task VoteUp(IssueModel issue)
	//{
	//	if (loggedInUser is not null)
	//	{
	//		if (issue.Author.Id == loggedInUser.Id)
	//		{
	//			// Can't vote on your own suggestion
	//			return;
	//		}

	//		if (issue.UserVotes.Add(loggedInUser.Id) == false)
	//		{
	//			issue.UserVotes.Remove(loggedInUser.Id);
	//		}

	//		await issueService.UpvoteSuggestion(issue.Id, loggedInUser.Id);

	//		if (isSortedByNew == false)
	//		{
	//			issues = issues.OrderByDescending(s => s.DateCreated).ToList();
	//		}
	//	}
	//	else
	//	{
	//		navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
	//	}
	//}

	//private string GetUpvoteTopText(IssueModel suggestion)
	//{
	//	if (suggestion.UserVotes?.Count > 0)
	//	{
	//		return suggestion.UserVotes.Count.ToString("00");
	//	}
	//	else
	//	{
	//		if (suggestion.Author.Id == loggedInUser?.Id)
	//		{
	//			return "Awaiting";
	//		}
	//		else
	//		{
	//			return "Click To";
	//		}
	//	}
	//}

	//private string GetUpvoteBottomText(SuggestionModel suggestion)
	//{
	//	if (suggestion.UserVotes?.Count > 1)
	//	{
	//		return "Upvotes";
	//	}
	//	else
	//	{
	//		return "Upvote";
	//	}
	//}

	private void OpenDetails(IssueModel issue)
	{
		NavManager.NavigateTo($"/Details/{issue.Id}");
	}

	private string SortedByNewClass(bool isNew)
	{
		if (isNew == _isSortedByNew)
		{
			return "sort-selected";
		}
		return "";
	}

	//private string GetVoteClass(SuggestionModel suggestion)
	//{
	//	if (suggestion.UserVotes is null || suggestion.UserVotes.Count == 0)
	//	{
	//		return "suggestion-entry-no-votes";
	//	}
	//	else if (suggestion.UserVotes.Contains(loggedInUser?.Id))
	//	{
	//		return "suggestion-entry-voted";
	//	}
	//	else
	//	{
	//		return "suggestion-entry-not-voted";
	//	}
	//}

	private string GetIssueStatusClass(IssueModel issue)
	{
		if (issue is null | issue.IssueStatus is null)
		{
			return "suggestion-entry-status-none";
		}

		var output = issue.IssueStatus.StatusName switch
		{
			"Completed" => "suggestion-entry-status-completed",
			"Watching" => "suggestion-entry-status-watching",
			"Upcoming" => "suggestion-entry-status-upcoming",
			"Dismissed" => "suggestion-entry-status-dismissed",
			_ => "suggestion-entry-status-none"
			};

		return output;
	}

	//private string GetSelectedCategory(string category = "All")
	//{
	//	if (category == selectedCategory)
	//	{
	//		return "selected-category";
	//	}
	//	else
	//	{
	//		return "";
	//	}
	//}

	private string GetSelectedStatus(string status = "All")
	{
		if (status == _selectedStatus)
		{
			return "selected-status";
		}
		return "";
	}

}