@page "/"
@inject AuthenticationStateProvider authProvider
@inject IUserService userService
@inject IIssueService issueService
@inject IStatusService statusService
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage


<PageTitle>Index</PageTitle>


<h1 class="page-heading text-uppercase mb-4">Issue Tracker</h1>
<div class="issue-container">
	<button @onclick="LoadCreatePage" class="issue-btn btn btn-outline-light btn-lg text-uppercase">New Issue</button>
</div>

<div class="row">
	<div class="issues-count col-md-4 text-light mt-2">@issues?.Count Issues</div>
	<div class="col-md-4 col-xl-5 btn-group">
		<button class="btn btn-order @SortedByNewClass(true)" @onclick="(() => OrderByNew(true))">New</button>
		<button class="btn btn-order @SortedByNewClass(false)" @onclick="(() => OrderByNew(false))">Popular</button>
	</div>
	<div class="col-md-4 col-xl-3 search-box">
		<input type="text" placeholder="Search"
					 aria-label="Search box" class="form-control rounded-control"
					 @oninput="((txt) => OnSearchInput((string)txt.Value))" />
	</div>
</div>

<div class="row">
	<div class="col-md-8 col-xl-9">
		@if (issues is not null)
		{
			@foreach (var s in issues)
			{
				<div class="issue-entry">
						<div class="issue-entry-text">
						<div class="issue-entry-text-title" @onclick="(() => OpenDetails(s))">
							@s.Description
						</div>
						</div>
					<div class="issue-entry-status @GetIssueStatusClass(s)">
						<div class="issue-entry-status-text">
							@s.IssueStatus?.StatusName
						</div>
					</div>
				</div>
			}
		}
	</div>
</div>

@code {
	private UserModel loggedInUser = new();
	private List<IssueModel> issues;
	private List<StatusModel> statuses;

	private string selectedStatus = "All";
	private string searchText = "";
	bool isSortedByNew = true;

	protected override async Task OnInitializedAsync()
	{
		issues = await issueService.GetIssues();
		statuses = await statusService.GetStatuses();
		await LoadAndVerifyUser();
	}

	private void LoadCreatePage()
	{
		if (loggedInUser is not null)
		{
			navManager.NavigateTo("/Create");
		}
		else
		{
			navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
		}
	}

	private async Task LoadAndVerifyUser()
	{
		var authState = await authProvider.GetAuthenticationStateAsync();
		string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;

		if (string.IsNullOrWhiteSpace(objectId) == false)
		{
			loggedInUser = await userService.GetUserFromAuthentication(objectId) ?? new();

			string firstName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("givenname"))?.Value;
			string lastName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("surname"))?.Value;
			string displayName = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("name"))?.Value;
			string email = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("email"))?.Value;

			bool isDirty = false;
			if (objectId.Equals(loggedInUser.ObjectIdentifier) == false)
			{
				isDirty = true;
				loggedInUser.ObjectIdentifier = objectId;
			}
			if (firstName.Equals(loggedInUser.FirstName) == false)
			{
				isDirty = true;
				loggedInUser.FirstName = firstName;
			}
			if (lastName.Equals(loggedInUser.LastName) == false)
			{
				isDirty = true;
				loggedInUser.LastName = lastName;
			}
			if (displayName.Equals(loggedInUser.DisplayName) == false)
			{
				isDirty = true;
				loggedInUser.DisplayName = displayName;
			}
			if (email.Equals(loggedInUser.EmailAddress) == false)
			{
				isDirty = true;
				loggedInUser.EmailAddress = email;
			}
			if (isDirty)
			{
				if (string.IsNullOrWhiteSpace(loggedInUser.Id))
				{
					await userService.CreateUser(loggedInUser);
				}
				else
				{
					await userService.UpdateUser(loggedInUser);
				}
			}
		}
	}

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await LoadFilterState();
			await FilterSuggestions();
			StateHasChanged();
		}
	}

	private async Task LoadFilterState()
	{
		//var stringResults = await sessionStorage.GetAsync<string>(nameof(selectedCategory));
		//selectedCategory = stringResults.Success ? stringResults.Value : "All";

		var stringResults = await sessionStorage.GetAsync<string>(nameof(selectedStatus));
		selectedStatus = stringResults.Success ? stringResults.Value : "All";

		stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
		searchText = stringResults.Success ? stringResults.Value : "";

		var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
		isSortedByNew = boolResults.Success ? boolResults.Value : true;
	}

	private async Task SaveFilterState()
	{
		//await sessionStorage.SetAsync(nameof(selectedCategory), selectedCategory);
		await sessionStorage.SetAsync(nameof(selectedStatus), selectedStatus);
		await sessionStorage.SetAsync(nameof(searchText), searchText);
		await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
	}

	private async Task FilterSuggestions()
	{
		var output = await issueService.GetIssues();

		//if (selectedCategory != "All")
		//{
		//	output = output.Where(s => s.Category?.CategoryName == selectedCategory).ToList();
		//}

		if (selectedStatus != "All")
		{
			output = output.Where(s => s.IssueStatus?.StatusName == selectedStatus).ToList();
		}

		if (string.IsNullOrWhiteSpace(searchText) == false)
		{
			output = output.Where(
					s => s.IssueName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
					s.Description.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)
			).ToList();
		}

		if (isSortedByNew)
		{
			output = output.OrderByDescending(s => s.DateCreated).ToList();
		}
		//else
		//{
		//	output = output.OrderByDescending(s => s.UserVotes.Count)
		//									.ThenByDescending(s => s.DateCreated).ToList();
		//}

		issues = output;

		await SaveFilterState();
	}

	private async Task OrderByNew(bool isNew)
	{
		isSortedByNew = isNew;
		await FilterSuggestions();
	}

	private async Task OnSearchInput(string searchInput)
	{
		searchText = searchInput;
		await FilterSuggestions();
	}

	//private async Task OnCategoryClick(string category = "All")
	//{
	//	selectedCategory = category;
	//	await FilterSuggestions();
	//}

	private async Task OnStatusClick(string status = "All")
	{
		selectedStatus = status;
		await FilterSuggestions();
	}

	//private async Task VoteUp(IssueModel issue)
	//{
	//	if (loggedInUser is not null)
	//	{
	//		if (issue.Author.Id == loggedInUser.Id)
	//		{
	//			// Can't vote on your own suggestion
	//			return;
	//		}

	//		if (issue.UserVotes.Add(loggedInUser.Id) == false)
	//		{
	//			issue.UserVotes.Remove(loggedInUser.Id);
	//		}

	//		await issueService.UpvoteSuggestion(issue.Id, loggedInUser.Id);

	//		if (isSortedByNew == false)
	//		{
	//			issues = issues.OrderByDescending(s => s.DateCreated).ToList();
	//		}
	//	}
	//	else
	//	{
	//		navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
	//	}
	//}

	//private string GetUpvoteTopText(IssueModel suggestion)
	//{
	//	if (suggestion.UserVotes?.Count > 0)
	//	{
	//		return suggestion.UserVotes.Count.ToString("00");
	//	}
	//	else
	//	{
	//		if (suggestion.Author.Id == loggedInUser?.Id)
	//		{
	//			return "Awaiting";
	//		}
	//		else
	//		{
	//			return "Click To";
	//		}
	//	}
	//}

	//private string GetUpvoteBottomText(SuggestionModel suggestion)
	//{
	//	if (suggestion.UserVotes?.Count > 1)
	//	{
	//		return "Upvotes";
	//	}
	//	else
	//	{
	//		return "Upvote";
	//	}
	//}

	private void OpenDetails(IssueModel issue)
	{
		navManager.NavigateTo($"/Details/{issue.Id}");
	}

	private string SortedByNewClass(bool isNew)
	{
		if (isNew == isSortedByNew)
		{
			return "sort-selected";
		}
		else
		{
			return "";
		}
	}

	//private string GetVoteClass(SuggestionModel suggestion)
	//{
	//	if (suggestion.UserVotes is null || suggestion.UserVotes.Count == 0)
	//	{
	//		return "suggestion-entry-no-votes";
	//	}
	//	else if (suggestion.UserVotes.Contains(loggedInUser?.Id))
	//	{
	//		return "suggestion-entry-voted";
	//	}
	//	else
	//	{
	//		return "suggestion-entry-not-voted";
	//	}
	//}

	private string GetIssueStatusClass(IssueModel issue)
	{
		if (issue is null | issue.IssueStatus is null)
		{
			return "suggestion-entry-status-none";
		}

		string output = issue.IssueStatus.StatusName switch
		{
			"Completed" => "suggestion-entry-status-completed",
			"Watching" => "suggestion-entry-status-watching",
			"Upcoming" => "suggestion-entry-status-upcoming",
			"Dismissed" => "suggestion-entry-status-dismissed",
			_ => "suggestion-entry-status-none",
		};

		return output;
	}

	//private string GetSelectedCategory(string category = "All")
	//{
	//	if (category == selectedCategory)
	//	{
	//		return "selected-category";
	//	}
	//	else
	//	{
	//		return "";
	//	}
	//}

	private string GetSelectedStatus(string status = "All")
	{
		if (status == selectedStatus)
		{
			return "selected-status";
		}
		else
		{
			return "";
		}
	}
}