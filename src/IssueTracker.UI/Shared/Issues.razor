@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthProvider
@inject IIssueService IssueService

<div class="col-md-8 col-xl-9">
	@if (Data is not null)
	{
		<Virtualize Context="item" Items="@Data" OverscanCount="10">
			<div class="issue-entry">

				<div class="issue-entry-category @GetIssueCategoryCssClass(item)">
					<div class="issue-entry-category-text" @onclick="() => OpenDetailsPage(item)">
						@item.Category.CategoryName
					</div>
				</div>

				<div class="issue-entry-text">
					<div class="issue-entry-text-title" @onclick="() => OpenDetailsPage(item)">
						@item.IssueName
					</div>
					<div class="issue-entry-text-description">
						@item.Description
					</div>
					@if (CanArchive)
					{

						@if (_archivingIssue is null || _archivingIssue.Id != item.Id)
						{
							<div class="issue-entry-bottom">
								<div class="issue-entry-text-category">@item.DateCreated</div>
								<AuthorizeView Policy="Admin">
									<button id="archive" @onclick="() => _archivingIssue = item" class="btn issue-entry-text-category btn-archive">
										archive
									</button>
								</AuthorizeView>
							</div>
						}
						else
						{
							<div class="issue-entry-bottom">
								<button id="confirm" class="btn btn-archive btn-archive-confirm" @onclick="ArchiveIssue">
									confirm
								</button>
								<button id="reject" class="btn btn-archive btn-archive-reject" @onclick="() => _archivingIssue = null">
									cancel
								</button>
							</div>
						}

					}

				</div>
				<div class="issue-entry-status @GetIssueStatusCssClass(item)">
					<div class="issue-entry-status-text">
						@item.IssueStatus?.StatusName
					</div>
				</div>
			</div>
		</Virtualize>
	}
</div>


@code {

	[Parameter]
	public bool CanArchive { get; set; } = false;

	[Parameter]
	public UserModel LoggedInUser { get; set; } = new();

	[Parameter]
	public List<IssueModel> Data { get; set; } = new();

	private IssueModel _archivingIssue = new();

	/// <summary>
	///		GetIssueCategoryCssClass
	/// </summary>
	/// <param name="issue">IssueModel</param>
	/// <returns>string css class</returns>
	private static string GetIssueCategoryCssClass(IssueModel issue)
	{

		if (issue.Category is null)
		{

			return "issue-entry-category-none";

		}

		var output = issue.Category.CategoryName switch
		{

			"Design" => "issue-entry-category-design",
			"Documentation" => "issue-entry-category-documentation",
			"Implementation" => "issue-entry-category-implementation",
			"Clarification" => "issue-entry-category-clarification",
			"Miscellaneous" => "issue-entry-category-miscellaneous",
			_ => "issue-entry-category-none"

		};

		return output;

	}

	/// <summary>
	///		GetIssueStatusCssClass method
	/// </summary>
	/// <param name="issue">IssueModel</param>
	/// <returns>string css class</returns>
	private static string GetIssueStatusCssClass(IssueModel issue)
	{

		if (issue.IssueStatus is null)
		{

			return "issue-entry-status-none";

		}

		var output = issue.IssueStatus.StatusName switch
		{

			"Answered" => "issue-entry-status-answered",
			"In Work" => "issue-entry-status-inwork",
			"Watching" => "issue-entry-status-watching",
			"Dismissed" => "issue-entry-status-dismissed",
			_ => "issue-entry-status-none"

		};

		return output;

	}

	/// <summary>
	///		OpenDetailsPage method
	/// </summary>
	/// <param name="issue">IssueModel</param>
	private void OpenDetailsPage(IssueModel issue)
	{

		NavManager.NavigateTo($"/Details/{issue.Id}");

	}

	/// <summary>
	///		Archive issue method
	/// </summary>
	private async Task ArchiveIssue()
	{

		_archivingIssue.Archived = true;
		await IssueService.UpdateIssue(_archivingIssue);
		Data.Remove(_archivingIssue);
		_archivingIssue = null;

	}

}
